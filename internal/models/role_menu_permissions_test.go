// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRoleMenuPermissions(t *testing.T) {
	t.Parallel()

	query := RoleMenuPermissions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRoleMenuPermissionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenuPermission{}
	if err = randomize.Struct(seed, o, roleMenuPermissionDBTypes, true, roleMenuPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoleMenuPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleMenuPermissionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenuPermission{}
	if err = randomize.Struct(seed, o, roleMenuPermissionDBTypes, true, roleMenuPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RoleMenuPermissions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoleMenuPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleMenuPermissionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenuPermission{}
	if err = randomize.Struct(seed, o, roleMenuPermissionDBTypes, true, roleMenuPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoleMenuPermissionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoleMenuPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleMenuPermissionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenuPermission{}
	if err = randomize.Struct(seed, o, roleMenuPermissionDBTypes, true, roleMenuPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RoleMenuPermissionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RoleMenuPermission exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RoleMenuPermissionExists to return true, but got false.")
	}
}

func testRoleMenuPermissionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenuPermission{}
	if err = randomize.Struct(seed, o, roleMenuPermissionDBTypes, true, roleMenuPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	roleMenuPermissionFound, err := FindRoleMenuPermission(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if roleMenuPermissionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRoleMenuPermissionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenuPermission{}
	if err = randomize.Struct(seed, o, roleMenuPermissionDBTypes, true, roleMenuPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RoleMenuPermissions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRoleMenuPermissionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenuPermission{}
	if err = randomize.Struct(seed, o, roleMenuPermissionDBTypes, true, roleMenuPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RoleMenuPermissions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRoleMenuPermissionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMenuPermissionOne := &RoleMenuPermission{}
	roleMenuPermissionTwo := &RoleMenuPermission{}
	if err = randomize.Struct(seed, roleMenuPermissionOne, roleMenuPermissionDBTypes, false, roleMenuPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuPermission struct: %s", err)
	}
	if err = randomize.Struct(seed, roleMenuPermissionTwo, roleMenuPermissionDBTypes, false, roleMenuPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = roleMenuPermissionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = roleMenuPermissionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RoleMenuPermissions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRoleMenuPermissionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	roleMenuPermissionOne := &RoleMenuPermission{}
	roleMenuPermissionTwo := &RoleMenuPermission{}
	if err = randomize.Struct(seed, roleMenuPermissionOne, roleMenuPermissionDBTypes, false, roleMenuPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuPermission struct: %s", err)
	}
	if err = randomize.Struct(seed, roleMenuPermissionTwo, roleMenuPermissionDBTypes, false, roleMenuPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = roleMenuPermissionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = roleMenuPermissionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleMenuPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func roleMenuPermissionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RoleMenuPermission) error {
	*o = RoleMenuPermission{}
	return nil
}

func roleMenuPermissionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RoleMenuPermission) error {
	*o = RoleMenuPermission{}
	return nil
}

func roleMenuPermissionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RoleMenuPermission) error {
	*o = RoleMenuPermission{}
	return nil
}

func roleMenuPermissionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RoleMenuPermission) error {
	*o = RoleMenuPermission{}
	return nil
}

func roleMenuPermissionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RoleMenuPermission) error {
	*o = RoleMenuPermission{}
	return nil
}

func roleMenuPermissionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RoleMenuPermission) error {
	*o = RoleMenuPermission{}
	return nil
}

func roleMenuPermissionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RoleMenuPermission) error {
	*o = RoleMenuPermission{}
	return nil
}

func roleMenuPermissionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RoleMenuPermission) error {
	*o = RoleMenuPermission{}
	return nil
}

func roleMenuPermissionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RoleMenuPermission) error {
	*o = RoleMenuPermission{}
	return nil
}

func testRoleMenuPermissionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RoleMenuPermission{}
	o := &RoleMenuPermission{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, roleMenuPermissionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RoleMenuPermission object: %s", err)
	}

	AddRoleMenuPermissionHook(boil.BeforeInsertHook, roleMenuPermissionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	roleMenuPermissionBeforeInsertHooks = []RoleMenuPermissionHook{}

	AddRoleMenuPermissionHook(boil.AfterInsertHook, roleMenuPermissionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	roleMenuPermissionAfterInsertHooks = []RoleMenuPermissionHook{}

	AddRoleMenuPermissionHook(boil.AfterSelectHook, roleMenuPermissionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	roleMenuPermissionAfterSelectHooks = []RoleMenuPermissionHook{}

	AddRoleMenuPermissionHook(boil.BeforeUpdateHook, roleMenuPermissionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	roleMenuPermissionBeforeUpdateHooks = []RoleMenuPermissionHook{}

	AddRoleMenuPermissionHook(boil.AfterUpdateHook, roleMenuPermissionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	roleMenuPermissionAfterUpdateHooks = []RoleMenuPermissionHook{}

	AddRoleMenuPermissionHook(boil.BeforeDeleteHook, roleMenuPermissionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	roleMenuPermissionBeforeDeleteHooks = []RoleMenuPermissionHook{}

	AddRoleMenuPermissionHook(boil.AfterDeleteHook, roleMenuPermissionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	roleMenuPermissionAfterDeleteHooks = []RoleMenuPermissionHook{}

	AddRoleMenuPermissionHook(boil.BeforeUpsertHook, roleMenuPermissionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	roleMenuPermissionBeforeUpsertHooks = []RoleMenuPermissionHook{}

	AddRoleMenuPermissionHook(boil.AfterUpsertHook, roleMenuPermissionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	roleMenuPermissionAfterUpsertHooks = []RoleMenuPermissionHook{}
}

func testRoleMenuPermissionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenuPermission{}
	if err = randomize.Struct(seed, o, roleMenuPermissionDBTypes, true, roleMenuPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleMenuPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoleMenuPermissionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenuPermission{}
	if err = randomize.Struct(seed, o, roleMenuPermissionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RoleMenuPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(roleMenuPermissionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RoleMenuPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoleMenuPermissionToOneMenuPermissionUsingMenuPermission(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RoleMenuPermission
	var foreign MenuPermission

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, roleMenuPermissionDBTypes, true, roleMenuPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuPermission struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, menuPermissionDBTypes, false, menuPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuPermission struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.MenuPermissionID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.MenuPermission().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddMenuPermissionHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *MenuPermission) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := RoleMenuPermissionSlice{&local}
	if err = local.L.LoadMenuPermission(ctx, tx, false, (*[]*RoleMenuPermission)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MenuPermission == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.MenuPermission = nil
	if err = local.L.LoadMenuPermission(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MenuPermission == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testRoleMenuPermissionToOneRoleUsingRole(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RoleMenuPermission
	var foreign Role

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, roleMenuPermissionDBTypes, true, roleMenuPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuPermission struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, roleDBTypes, false, roleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Role struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.RoleID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Role().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddRoleHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Role) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := RoleMenuPermissionSlice{&local}
	if err = local.L.LoadRole(ctx, tx, false, (*[]*RoleMenuPermission)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Role == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Role = nil
	if err = local.L.LoadRole(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Role == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testRoleMenuPermissionToOneSetOpMenuPermissionUsingMenuPermission(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleMenuPermission
	var b, c MenuPermission

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleMenuPermissionDBTypes, false, strmangle.SetComplement(roleMenuPermissionPrimaryKeyColumns, roleMenuPermissionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, menuPermissionDBTypes, false, strmangle.SetComplement(menuPermissionPrimaryKeyColumns, menuPermissionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, menuPermissionDBTypes, false, strmangle.SetComplement(menuPermissionPrimaryKeyColumns, menuPermissionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MenuPermission{&b, &c} {
		err = a.SetMenuPermission(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.MenuPermission != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RoleMenuPermissions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.MenuPermissionID, x.ID) {
			t.Error("foreign key was wrong value", a.MenuPermissionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MenuPermissionID))
		reflect.Indirect(reflect.ValueOf(&a.MenuPermissionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.MenuPermissionID, x.ID) {
			t.Error("foreign key was wrong value", a.MenuPermissionID, x.ID)
		}
	}
}

func testRoleMenuPermissionToOneRemoveOpMenuPermissionUsingMenuPermission(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleMenuPermission
	var b MenuPermission

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleMenuPermissionDBTypes, false, strmangle.SetComplement(roleMenuPermissionPrimaryKeyColumns, roleMenuPermissionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, menuPermissionDBTypes, false, strmangle.SetComplement(menuPermissionPrimaryKeyColumns, menuPermissionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetMenuPermission(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveMenuPermission(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.MenuPermission().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.MenuPermission != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.MenuPermissionID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.RoleMenuPermissions) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testRoleMenuPermissionToOneSetOpRoleUsingRole(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleMenuPermission
	var b, c Role

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleMenuPermissionDBTypes, false, strmangle.SetComplement(roleMenuPermissionPrimaryKeyColumns, roleMenuPermissionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleDBTypes, false, strmangle.SetComplement(rolePrimaryKeyColumns, roleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, roleDBTypes, false, strmangle.SetComplement(rolePrimaryKeyColumns, roleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Role{&b, &c} {
		err = a.SetRole(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Role != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RoleMenuPermissions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.RoleID, x.ID) {
			t.Error("foreign key was wrong value", a.RoleID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RoleID))
		reflect.Indirect(reflect.ValueOf(&a.RoleID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.RoleID, x.ID) {
			t.Error("foreign key was wrong value", a.RoleID, x.ID)
		}
	}
}

func testRoleMenuPermissionToOneRemoveOpRoleUsingRole(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleMenuPermission
	var b Role

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleMenuPermissionDBTypes, false, strmangle.SetComplement(roleMenuPermissionPrimaryKeyColumns, roleMenuPermissionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleDBTypes, false, strmangle.SetComplement(rolePrimaryKeyColumns, roleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetRole(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveRole(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Role().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Role != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.RoleID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.RoleMenuPermissions) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testRoleMenuPermissionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenuPermission{}
	if err = randomize.Struct(seed, o, roleMenuPermissionDBTypes, true, roleMenuPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoleMenuPermissionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenuPermission{}
	if err = randomize.Struct(seed, o, roleMenuPermissionDBTypes, true, roleMenuPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoleMenuPermissionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoleMenuPermissionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenuPermission{}
	if err = randomize.Struct(seed, o, roleMenuPermissionDBTypes, true, roleMenuPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RoleMenuPermissions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	roleMenuPermissionDBTypes = map[string]string{`ID`: `integer`, `RoleID`: `smallint`, `MenuPermissionID`: `smallint`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `DeletedAt`: `timestamp without time zone`}
	_                         = bytes.MinRead
)

func testRoleMenuPermissionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(roleMenuPermissionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(roleMenuPermissionAllColumns) == len(roleMenuPermissionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenuPermission{}
	if err = randomize.Struct(seed, o, roleMenuPermissionDBTypes, true, roleMenuPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleMenuPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, roleMenuPermissionDBTypes, true, roleMenuPermissionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleMenuPermission struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRoleMenuPermissionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(roleMenuPermissionAllColumns) == len(roleMenuPermissionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RoleMenuPermission{}
	if err = randomize.Struct(seed, o, roleMenuPermissionDBTypes, true, roleMenuPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMenuPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleMenuPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, roleMenuPermissionDBTypes, true, roleMenuPermissionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleMenuPermission struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(roleMenuPermissionAllColumns, roleMenuPermissionPrimaryKeyColumns) {
		fields = roleMenuPermissionAllColumns
	} else {
		fields = strmangle.SetComplement(
			roleMenuPermissionAllColumns,
			roleMenuPermissionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RoleMenuPermissionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRoleMenuPermissionsUpsert(t *testing.T) {
	t.Parallel()

	if len(roleMenuPermissionAllColumns) == len(roleMenuPermissionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RoleMenuPermission{}
	if err = randomize.Struct(seed, &o, roleMenuPermissionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RoleMenuPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RoleMenuPermission: %s", err)
	}

	count, err := RoleMenuPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, roleMenuPermissionDBTypes, false, roleMenuPermissionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleMenuPermission struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RoleMenuPermission: %s", err)
	}

	count, err = RoleMenuPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
