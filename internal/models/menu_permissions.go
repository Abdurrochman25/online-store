// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MenuPermission is an object representing the database table.
type MenuPermission struct {
	ID           int        `boil:"id" json:"id" toml:"id" yaml:"id"`
	MenuID       null.Int16 `boil:"menu_id" json:"menu_id,omitempty" toml:"menu_id" yaml:"menu_id,omitempty"`
	PermissionID null.Int16 `boil:"permission_id" json:"permission_id,omitempty" toml:"permission_id" yaml:"permission_id,omitempty"`
	CreatedAt    null.Time  `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt    null.Time  `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt    null.Time  `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *menuPermissionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L menuPermissionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MenuPermissionColumns = struct {
	ID           string
	MenuID       string
	PermissionID string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
}{
	ID:           "id",
	MenuID:       "menu_id",
	PermissionID: "permission_id",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
}

var MenuPermissionTableColumns = struct {
	ID           string
	MenuID       string
	PermissionID string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
}{
	ID:           "menu_permissions.id",
	MenuID:       "menu_permissions.menu_id",
	PermissionID: "menu_permissions.permission_id",
	CreatedAt:    "menu_permissions.created_at",
	UpdatedAt:    "menu_permissions.updated_at",
	DeletedAt:    "menu_permissions.deleted_at",
}

// Generated where

var MenuPermissionWhere = struct {
	ID           whereHelperint
	MenuID       whereHelpernull_Int16
	PermissionID whereHelpernull_Int16
	CreatedAt    whereHelpernull_Time
	UpdatedAt    whereHelpernull_Time
	DeletedAt    whereHelpernull_Time
}{
	ID:           whereHelperint{field: "\"menu_permissions\".\"id\""},
	MenuID:       whereHelpernull_Int16{field: "\"menu_permissions\".\"menu_id\""},
	PermissionID: whereHelpernull_Int16{field: "\"menu_permissions\".\"permission_id\""},
	CreatedAt:    whereHelpernull_Time{field: "\"menu_permissions\".\"created_at\""},
	UpdatedAt:    whereHelpernull_Time{field: "\"menu_permissions\".\"updated_at\""},
	DeletedAt:    whereHelpernull_Time{field: "\"menu_permissions\".\"deleted_at\""},
}

// MenuPermissionRels is where relationship names are stored.
var MenuPermissionRels = struct {
	Menu                string
	Permission          string
	RoleMenuPermissions string
}{
	Menu:                "Menu",
	Permission:          "Permission",
	RoleMenuPermissions: "RoleMenuPermissions",
}

// menuPermissionR is where relationships are stored.
type menuPermissionR struct {
	Menu                *Menu                   `boil:"Menu" json:"Menu" toml:"Menu" yaml:"Menu"`
	Permission          *Permission             `boil:"Permission" json:"Permission" toml:"Permission" yaml:"Permission"`
	RoleMenuPermissions RoleMenuPermissionSlice `boil:"RoleMenuPermissions" json:"RoleMenuPermissions" toml:"RoleMenuPermissions" yaml:"RoleMenuPermissions"`
}

// NewStruct creates a new relationship struct
func (*menuPermissionR) NewStruct() *menuPermissionR {
	return &menuPermissionR{}
}

func (r *menuPermissionR) GetMenu() *Menu {
	if r == nil {
		return nil
	}
	return r.Menu
}

func (r *menuPermissionR) GetPermission() *Permission {
	if r == nil {
		return nil
	}
	return r.Permission
}

func (r *menuPermissionR) GetRoleMenuPermissions() RoleMenuPermissionSlice {
	if r == nil {
		return nil
	}
	return r.RoleMenuPermissions
}

// menuPermissionL is where Load methods for each relationship are stored.
type menuPermissionL struct{}

var (
	menuPermissionAllColumns            = []string{"id", "menu_id", "permission_id", "created_at", "updated_at", "deleted_at"}
	menuPermissionColumnsWithoutDefault = []string{}
	menuPermissionColumnsWithDefault    = []string{"id", "menu_id", "permission_id", "created_at", "updated_at", "deleted_at"}
	menuPermissionPrimaryKeyColumns     = []string{"id"}
	menuPermissionGeneratedColumns      = []string{}
)

type (
	// MenuPermissionSlice is an alias for a slice of pointers to MenuPermission.
	// This should almost always be used instead of []MenuPermission.
	MenuPermissionSlice []*MenuPermission
	// MenuPermissionHook is the signature for custom MenuPermission hook methods
	MenuPermissionHook func(context.Context, boil.ContextExecutor, *MenuPermission) error

	menuPermissionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	menuPermissionType                 = reflect.TypeOf(&MenuPermission{})
	menuPermissionMapping              = queries.MakeStructMapping(menuPermissionType)
	menuPermissionPrimaryKeyMapping, _ = queries.BindMapping(menuPermissionType, menuPermissionMapping, menuPermissionPrimaryKeyColumns)
	menuPermissionInsertCacheMut       sync.RWMutex
	menuPermissionInsertCache          = make(map[string]insertCache)
	menuPermissionUpdateCacheMut       sync.RWMutex
	menuPermissionUpdateCache          = make(map[string]updateCache)
	menuPermissionUpsertCacheMut       sync.RWMutex
	menuPermissionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var menuPermissionAfterSelectMu sync.Mutex
var menuPermissionAfterSelectHooks []MenuPermissionHook

var menuPermissionBeforeInsertMu sync.Mutex
var menuPermissionBeforeInsertHooks []MenuPermissionHook
var menuPermissionAfterInsertMu sync.Mutex
var menuPermissionAfterInsertHooks []MenuPermissionHook

var menuPermissionBeforeUpdateMu sync.Mutex
var menuPermissionBeforeUpdateHooks []MenuPermissionHook
var menuPermissionAfterUpdateMu sync.Mutex
var menuPermissionAfterUpdateHooks []MenuPermissionHook

var menuPermissionBeforeDeleteMu sync.Mutex
var menuPermissionBeforeDeleteHooks []MenuPermissionHook
var menuPermissionAfterDeleteMu sync.Mutex
var menuPermissionAfterDeleteHooks []MenuPermissionHook

var menuPermissionBeforeUpsertMu sync.Mutex
var menuPermissionBeforeUpsertHooks []MenuPermissionHook
var menuPermissionAfterUpsertMu sync.Mutex
var menuPermissionAfterUpsertHooks []MenuPermissionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MenuPermission) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuPermissionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MenuPermission) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuPermissionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MenuPermission) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuPermissionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MenuPermission) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuPermissionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MenuPermission) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuPermissionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MenuPermission) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuPermissionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MenuPermission) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuPermissionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MenuPermission) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuPermissionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MenuPermission) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuPermissionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMenuPermissionHook registers your hook function for all future operations.
func AddMenuPermissionHook(hookPoint boil.HookPoint, menuPermissionHook MenuPermissionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		menuPermissionAfterSelectMu.Lock()
		menuPermissionAfterSelectHooks = append(menuPermissionAfterSelectHooks, menuPermissionHook)
		menuPermissionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		menuPermissionBeforeInsertMu.Lock()
		menuPermissionBeforeInsertHooks = append(menuPermissionBeforeInsertHooks, menuPermissionHook)
		menuPermissionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		menuPermissionAfterInsertMu.Lock()
		menuPermissionAfterInsertHooks = append(menuPermissionAfterInsertHooks, menuPermissionHook)
		menuPermissionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		menuPermissionBeforeUpdateMu.Lock()
		menuPermissionBeforeUpdateHooks = append(menuPermissionBeforeUpdateHooks, menuPermissionHook)
		menuPermissionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		menuPermissionAfterUpdateMu.Lock()
		menuPermissionAfterUpdateHooks = append(menuPermissionAfterUpdateHooks, menuPermissionHook)
		menuPermissionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		menuPermissionBeforeDeleteMu.Lock()
		menuPermissionBeforeDeleteHooks = append(menuPermissionBeforeDeleteHooks, menuPermissionHook)
		menuPermissionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		menuPermissionAfterDeleteMu.Lock()
		menuPermissionAfterDeleteHooks = append(menuPermissionAfterDeleteHooks, menuPermissionHook)
		menuPermissionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		menuPermissionBeforeUpsertMu.Lock()
		menuPermissionBeforeUpsertHooks = append(menuPermissionBeforeUpsertHooks, menuPermissionHook)
		menuPermissionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		menuPermissionAfterUpsertMu.Lock()
		menuPermissionAfterUpsertHooks = append(menuPermissionAfterUpsertHooks, menuPermissionHook)
		menuPermissionAfterUpsertMu.Unlock()
	}
}

// One returns a single menuPermission record from the query.
func (q menuPermissionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MenuPermission, error) {
	o := &MenuPermission{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for menu_permissions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MenuPermission records from the query.
func (q menuPermissionQuery) All(ctx context.Context, exec boil.ContextExecutor) (MenuPermissionSlice, error) {
	var o []*MenuPermission

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MenuPermission slice")
	}

	if len(menuPermissionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MenuPermission records in the query.
func (q menuPermissionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count menu_permissions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q menuPermissionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if menu_permissions exists")
	}

	return count > 0, nil
}

// Menu pointed to by the foreign key.
func (o *MenuPermission) Menu(mods ...qm.QueryMod) menuQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MenuID),
	}

	queryMods = append(queryMods, mods...)

	return Menus(queryMods...)
}

// Permission pointed to by the foreign key.
func (o *MenuPermission) Permission(mods ...qm.QueryMod) permissionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PermissionID),
	}

	queryMods = append(queryMods, mods...)

	return Permissions(queryMods...)
}

// RoleMenuPermissions retrieves all the role_menu_permission's RoleMenuPermissions with an executor.
func (o *MenuPermission) RoleMenuPermissions(mods ...qm.QueryMod) roleMenuPermissionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"role_menu_permissions\".\"menu_permission_id\"=?", o.ID),
	)

	return RoleMenuPermissions(queryMods...)
}

// LoadMenu allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (menuPermissionL) LoadMenu(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMenuPermission interface{}, mods queries.Applicator) error {
	var slice []*MenuPermission
	var object *MenuPermission

	if singular {
		var ok bool
		object, ok = maybeMenuPermission.(*MenuPermission)
		if !ok {
			object = new(MenuPermission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuPermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuPermission))
			}
		}
	} else {
		s, ok := maybeMenuPermission.(*[]*MenuPermission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuPermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuPermission))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &menuPermissionR{}
		}
		if !queries.IsNil(object.MenuID) {
			args[object.MenuID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuPermissionR{}
			}

			if !queries.IsNil(obj.MenuID) {
				args[obj.MenuID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`menus`),
		qm.WhereIn(`menus.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Menu")
	}

	var resultSlice []*Menu
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Menu")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for menus")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menus")
	}

	if len(menuAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Menu = foreign
		if foreign.R == nil {
			foreign.R = &menuR{}
		}
		foreign.R.MenuPermissions = append(foreign.R.MenuPermissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MenuID, foreign.ID) {
				local.R.Menu = foreign
				if foreign.R == nil {
					foreign.R = &menuR{}
				}
				foreign.R.MenuPermissions = append(foreign.R.MenuPermissions, local)
				break
			}
		}
	}

	return nil
}

// LoadPermission allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (menuPermissionL) LoadPermission(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMenuPermission interface{}, mods queries.Applicator) error {
	var slice []*MenuPermission
	var object *MenuPermission

	if singular {
		var ok bool
		object, ok = maybeMenuPermission.(*MenuPermission)
		if !ok {
			object = new(MenuPermission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuPermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuPermission))
			}
		}
	} else {
		s, ok := maybeMenuPermission.(*[]*MenuPermission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuPermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuPermission))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &menuPermissionR{}
		}
		if !queries.IsNil(object.PermissionID) {
			args[object.PermissionID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuPermissionR{}
			}

			if !queries.IsNil(obj.PermissionID) {
				args[obj.PermissionID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`permissions`),
		qm.WhereIn(`permissions.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Permission")
	}

	var resultSlice []*Permission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Permission")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for permissions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for permissions")
	}

	if len(permissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Permission = foreign
		if foreign.R == nil {
			foreign.R = &permissionR{}
		}
		foreign.R.MenuPermissions = append(foreign.R.MenuPermissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PermissionID, foreign.ID) {
				local.R.Permission = foreign
				if foreign.R == nil {
					foreign.R = &permissionR{}
				}
				foreign.R.MenuPermissions = append(foreign.R.MenuPermissions, local)
				break
			}
		}
	}

	return nil
}

// LoadRoleMenuPermissions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (menuPermissionL) LoadRoleMenuPermissions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMenuPermission interface{}, mods queries.Applicator) error {
	var slice []*MenuPermission
	var object *MenuPermission

	if singular {
		var ok bool
		object, ok = maybeMenuPermission.(*MenuPermission)
		if !ok {
			object = new(MenuPermission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuPermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuPermission))
			}
		}
	} else {
		s, ok := maybeMenuPermission.(*[]*MenuPermission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuPermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuPermission))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &menuPermissionR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuPermissionR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`role_menu_permissions`),
		qm.WhereIn(`role_menu_permissions.menu_permission_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load role_menu_permissions")
	}

	var resultSlice []*RoleMenuPermission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice role_menu_permissions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on role_menu_permissions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for role_menu_permissions")
	}

	if len(roleMenuPermissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RoleMenuPermissions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &roleMenuPermissionR{}
			}
			foreign.R.MenuPermission = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.MenuPermissionID) {
				local.R.RoleMenuPermissions = append(local.R.RoleMenuPermissions, foreign)
				if foreign.R == nil {
					foreign.R = &roleMenuPermissionR{}
				}
				foreign.R.MenuPermission = local
				break
			}
		}
	}

	return nil
}

// SetMenu of the menuPermission to the related item.
// Sets o.R.Menu to related.
// Adds o to related.R.MenuPermissions.
func (o *MenuPermission) SetMenu(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Menu) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"menu_permissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"menu_id"}),
		strmangle.WhereClause("\"", "\"", 2, menuPermissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MenuID, related.ID)
	if o.R == nil {
		o.R = &menuPermissionR{
			Menu: related,
		}
	} else {
		o.R.Menu = related
	}

	if related.R == nil {
		related.R = &menuR{
			MenuPermissions: MenuPermissionSlice{o},
		}
	} else {
		related.R.MenuPermissions = append(related.R.MenuPermissions, o)
	}

	return nil
}

// RemoveMenu relationship.
// Sets o.R.Menu to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MenuPermission) RemoveMenu(ctx context.Context, exec boil.ContextExecutor, related *Menu) error {
	var err error

	queries.SetScanner(&o.MenuID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("menu_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Menu = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MenuPermissions {
		if queries.Equal(o.MenuID, ri.MenuID) {
			continue
		}

		ln := len(related.R.MenuPermissions)
		if ln > 1 && i < ln-1 {
			related.R.MenuPermissions[i] = related.R.MenuPermissions[ln-1]
		}
		related.R.MenuPermissions = related.R.MenuPermissions[:ln-1]
		break
	}
	return nil
}

// SetPermission of the menuPermission to the related item.
// Sets o.R.Permission to related.
// Adds o to related.R.MenuPermissions.
func (o *MenuPermission) SetPermission(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Permission) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"menu_permissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"permission_id"}),
		strmangle.WhereClause("\"", "\"", 2, menuPermissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PermissionID, related.ID)
	if o.R == nil {
		o.R = &menuPermissionR{
			Permission: related,
		}
	} else {
		o.R.Permission = related
	}

	if related.R == nil {
		related.R = &permissionR{
			MenuPermissions: MenuPermissionSlice{o},
		}
	} else {
		related.R.MenuPermissions = append(related.R.MenuPermissions, o)
	}

	return nil
}

// RemovePermission relationship.
// Sets o.R.Permission to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MenuPermission) RemovePermission(ctx context.Context, exec boil.ContextExecutor, related *Permission) error {
	var err error

	queries.SetScanner(&o.PermissionID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("permission_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Permission = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MenuPermissions {
		if queries.Equal(o.PermissionID, ri.PermissionID) {
			continue
		}

		ln := len(related.R.MenuPermissions)
		if ln > 1 && i < ln-1 {
			related.R.MenuPermissions[i] = related.R.MenuPermissions[ln-1]
		}
		related.R.MenuPermissions = related.R.MenuPermissions[:ln-1]
		break
	}
	return nil
}

// AddRoleMenuPermissions adds the given related objects to the existing relationships
// of the menu_permission, optionally inserting them as new records.
// Appends related to o.R.RoleMenuPermissions.
// Sets related.R.MenuPermission appropriately.
func (o *MenuPermission) AddRoleMenuPermissions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RoleMenuPermission) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.MenuPermissionID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"role_menu_permissions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"menu_permission_id"}),
				strmangle.WhereClause("\"", "\"", 2, roleMenuPermissionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.MenuPermissionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &menuPermissionR{
			RoleMenuPermissions: related,
		}
	} else {
		o.R.RoleMenuPermissions = append(o.R.RoleMenuPermissions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roleMenuPermissionR{
				MenuPermission: o,
			}
		} else {
			rel.R.MenuPermission = o
		}
	}
	return nil
}

// SetRoleMenuPermissions removes all previously related items of the
// menu_permission replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MenuPermission's RoleMenuPermissions accordingly.
// Replaces o.R.RoleMenuPermissions with related.
// Sets related.R.MenuPermission's RoleMenuPermissions accordingly.
func (o *MenuPermission) SetRoleMenuPermissions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RoleMenuPermission) error {
	query := "update \"role_menu_permissions\" set \"menu_permission_id\" = null where \"menu_permission_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RoleMenuPermissions {
			queries.SetScanner(&rel.MenuPermissionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.MenuPermission = nil
		}
		o.R.RoleMenuPermissions = nil
	}

	return o.AddRoleMenuPermissions(ctx, exec, insert, related...)
}

// RemoveRoleMenuPermissions relationships from objects passed in.
// Removes related items from R.RoleMenuPermissions (uses pointer comparison, removal does not keep order)
// Sets related.R.MenuPermission.
func (o *MenuPermission) RemoveRoleMenuPermissions(ctx context.Context, exec boil.ContextExecutor, related ...*RoleMenuPermission) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.MenuPermissionID, nil)
		if rel.R != nil {
			rel.R.MenuPermission = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("menu_permission_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RoleMenuPermissions {
			if rel != ri {
				continue
			}

			ln := len(o.R.RoleMenuPermissions)
			if ln > 1 && i < ln-1 {
				o.R.RoleMenuPermissions[i] = o.R.RoleMenuPermissions[ln-1]
			}
			o.R.RoleMenuPermissions = o.R.RoleMenuPermissions[:ln-1]
			break
		}
	}

	return nil
}

// MenuPermissions retrieves all the records using an executor.
func MenuPermissions(mods ...qm.QueryMod) menuPermissionQuery {
	mods = append(mods, qm.From("\"menu_permissions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"menu_permissions\".*"})
	}

	return menuPermissionQuery{q}
}

// FindMenuPermission retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMenuPermission(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*MenuPermission, error) {
	menuPermissionObj := &MenuPermission{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"menu_permissions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, menuPermissionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from menu_permissions")
	}

	if err = menuPermissionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return menuPermissionObj, err
	}

	return menuPermissionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MenuPermission) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no menu_permissions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(menuPermissionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	menuPermissionInsertCacheMut.RLock()
	cache, cached := menuPermissionInsertCache[key]
	menuPermissionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			menuPermissionAllColumns,
			menuPermissionColumnsWithDefault,
			menuPermissionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(menuPermissionType, menuPermissionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(menuPermissionType, menuPermissionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"menu_permissions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"menu_permissions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into menu_permissions")
	}

	if !cached {
		menuPermissionInsertCacheMut.Lock()
		menuPermissionInsertCache[key] = cache
		menuPermissionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MenuPermission.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MenuPermission) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	menuPermissionUpdateCacheMut.RLock()
	cache, cached := menuPermissionUpdateCache[key]
	menuPermissionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			menuPermissionAllColumns,
			menuPermissionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update menu_permissions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"menu_permissions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, menuPermissionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(menuPermissionType, menuPermissionMapping, append(wl, menuPermissionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update menu_permissions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for menu_permissions")
	}

	if !cached {
		menuPermissionUpdateCacheMut.Lock()
		menuPermissionUpdateCache[key] = cache
		menuPermissionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q menuPermissionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for menu_permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for menu_permissions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MenuPermissionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"menu_permissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, menuPermissionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in menuPermission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all menuPermission")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MenuPermission) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no menu_permissions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(menuPermissionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	menuPermissionUpsertCacheMut.RLock()
	cache, cached := menuPermissionUpsertCache[key]
	menuPermissionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			menuPermissionAllColumns,
			menuPermissionColumnsWithDefault,
			menuPermissionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			menuPermissionAllColumns,
			menuPermissionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert menu_permissions, could not build update column list")
		}

		ret := strmangle.SetComplement(menuPermissionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(menuPermissionPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert menu_permissions, could not build conflict column list")
			}

			conflict = make([]string, len(menuPermissionPrimaryKeyColumns))
			copy(conflict, menuPermissionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"menu_permissions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(menuPermissionType, menuPermissionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(menuPermissionType, menuPermissionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert menu_permissions")
	}

	if !cached {
		menuPermissionUpsertCacheMut.Lock()
		menuPermissionUpsertCache[key] = cache
		menuPermissionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MenuPermission record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MenuPermission) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MenuPermission provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), menuPermissionPrimaryKeyMapping)
	sql := "DELETE FROM \"menu_permissions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from menu_permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for menu_permissions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q menuPermissionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no menuPermissionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from menu_permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for menu_permissions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MenuPermissionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(menuPermissionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"menu_permissions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, menuPermissionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from menuPermission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for menu_permissions")
	}

	if len(menuPermissionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MenuPermission) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMenuPermission(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MenuPermissionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MenuPermissionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"menu_permissions\".* FROM \"menu_permissions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, menuPermissionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MenuPermissionSlice")
	}

	*o = slice

	return nil
}

// MenuPermissionExists checks if the MenuPermission row exists.
func MenuPermissionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"menu_permissions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if menu_permissions exists")
	}

	return exists, nil
}

// Exists checks if the MenuPermission row exists.
func (o *MenuPermission) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MenuPermissionExists(ctx, exec, o.ID)
}
