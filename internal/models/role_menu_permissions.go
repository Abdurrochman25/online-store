// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RoleMenuPermission is an object representing the database table.
type RoleMenuPermission struct {
	ID               int        `boil:"id" json:"id" toml:"id" yaml:"id"`
	RoleID           null.Int16 `boil:"role_id" json:"role_id,omitempty" toml:"role_id" yaml:"role_id,omitempty"`
	MenuPermissionID null.Int16 `boil:"menu_permission_id" json:"menu_permission_id,omitempty" toml:"menu_permission_id" yaml:"menu_permission_id,omitempty"`
	CreatedAt        null.Time  `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt        null.Time  `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt        null.Time  `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *roleMenuPermissionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roleMenuPermissionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoleMenuPermissionColumns = struct {
	ID               string
	RoleID           string
	MenuPermissionID string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
}{
	ID:               "id",
	RoleID:           "role_id",
	MenuPermissionID: "menu_permission_id",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	DeletedAt:        "deleted_at",
}

var RoleMenuPermissionTableColumns = struct {
	ID               string
	RoleID           string
	MenuPermissionID string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
}{
	ID:               "role_menu_permissions.id",
	RoleID:           "role_menu_permissions.role_id",
	MenuPermissionID: "role_menu_permissions.menu_permission_id",
	CreatedAt:        "role_menu_permissions.created_at",
	UpdatedAt:        "role_menu_permissions.updated_at",
	DeletedAt:        "role_menu_permissions.deleted_at",
}

// Generated where

var RoleMenuPermissionWhere = struct {
	ID               whereHelperint
	RoleID           whereHelpernull_Int16
	MenuPermissionID whereHelpernull_Int16
	CreatedAt        whereHelpernull_Time
	UpdatedAt        whereHelpernull_Time
	DeletedAt        whereHelpernull_Time
}{
	ID:               whereHelperint{field: "\"role_menu_permissions\".\"id\""},
	RoleID:           whereHelpernull_Int16{field: "\"role_menu_permissions\".\"role_id\""},
	MenuPermissionID: whereHelpernull_Int16{field: "\"role_menu_permissions\".\"menu_permission_id\""},
	CreatedAt:        whereHelpernull_Time{field: "\"role_menu_permissions\".\"created_at\""},
	UpdatedAt:        whereHelpernull_Time{field: "\"role_menu_permissions\".\"updated_at\""},
	DeletedAt:        whereHelpernull_Time{field: "\"role_menu_permissions\".\"deleted_at\""},
}

// RoleMenuPermissionRels is where relationship names are stored.
var RoleMenuPermissionRels = struct {
	MenuPermission string
	Role           string
}{
	MenuPermission: "MenuPermission",
	Role:           "Role",
}

// roleMenuPermissionR is where relationships are stored.
type roleMenuPermissionR struct {
	MenuPermission *MenuPermission `boil:"MenuPermission" json:"MenuPermission" toml:"MenuPermission" yaml:"MenuPermission"`
	Role           *Role           `boil:"Role" json:"Role" toml:"Role" yaml:"Role"`
}

// NewStruct creates a new relationship struct
func (*roleMenuPermissionR) NewStruct() *roleMenuPermissionR {
	return &roleMenuPermissionR{}
}

func (r *roleMenuPermissionR) GetMenuPermission() *MenuPermission {
	if r == nil {
		return nil
	}
	return r.MenuPermission
}

func (r *roleMenuPermissionR) GetRole() *Role {
	if r == nil {
		return nil
	}
	return r.Role
}

// roleMenuPermissionL is where Load methods for each relationship are stored.
type roleMenuPermissionL struct{}

var (
	roleMenuPermissionAllColumns            = []string{"id", "role_id", "menu_permission_id", "created_at", "updated_at", "deleted_at"}
	roleMenuPermissionColumnsWithoutDefault = []string{}
	roleMenuPermissionColumnsWithDefault    = []string{"id", "role_id", "menu_permission_id", "created_at", "updated_at", "deleted_at"}
	roleMenuPermissionPrimaryKeyColumns     = []string{"id"}
	roleMenuPermissionGeneratedColumns      = []string{}
)

type (
	// RoleMenuPermissionSlice is an alias for a slice of pointers to RoleMenuPermission.
	// This should almost always be used instead of []RoleMenuPermission.
	RoleMenuPermissionSlice []*RoleMenuPermission
	// RoleMenuPermissionHook is the signature for custom RoleMenuPermission hook methods
	RoleMenuPermissionHook func(context.Context, boil.ContextExecutor, *RoleMenuPermission) error

	roleMenuPermissionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roleMenuPermissionType                 = reflect.TypeOf(&RoleMenuPermission{})
	roleMenuPermissionMapping              = queries.MakeStructMapping(roleMenuPermissionType)
	roleMenuPermissionPrimaryKeyMapping, _ = queries.BindMapping(roleMenuPermissionType, roleMenuPermissionMapping, roleMenuPermissionPrimaryKeyColumns)
	roleMenuPermissionInsertCacheMut       sync.RWMutex
	roleMenuPermissionInsertCache          = make(map[string]insertCache)
	roleMenuPermissionUpdateCacheMut       sync.RWMutex
	roleMenuPermissionUpdateCache          = make(map[string]updateCache)
	roleMenuPermissionUpsertCacheMut       sync.RWMutex
	roleMenuPermissionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var roleMenuPermissionAfterSelectMu sync.Mutex
var roleMenuPermissionAfterSelectHooks []RoleMenuPermissionHook

var roleMenuPermissionBeforeInsertMu sync.Mutex
var roleMenuPermissionBeforeInsertHooks []RoleMenuPermissionHook
var roleMenuPermissionAfterInsertMu sync.Mutex
var roleMenuPermissionAfterInsertHooks []RoleMenuPermissionHook

var roleMenuPermissionBeforeUpdateMu sync.Mutex
var roleMenuPermissionBeforeUpdateHooks []RoleMenuPermissionHook
var roleMenuPermissionAfterUpdateMu sync.Mutex
var roleMenuPermissionAfterUpdateHooks []RoleMenuPermissionHook

var roleMenuPermissionBeforeDeleteMu sync.Mutex
var roleMenuPermissionBeforeDeleteHooks []RoleMenuPermissionHook
var roleMenuPermissionAfterDeleteMu sync.Mutex
var roleMenuPermissionAfterDeleteHooks []RoleMenuPermissionHook

var roleMenuPermissionBeforeUpsertMu sync.Mutex
var roleMenuPermissionBeforeUpsertHooks []RoleMenuPermissionHook
var roleMenuPermissionAfterUpsertMu sync.Mutex
var roleMenuPermissionAfterUpsertHooks []RoleMenuPermissionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RoleMenuPermission) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleMenuPermissionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RoleMenuPermission) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleMenuPermissionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RoleMenuPermission) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleMenuPermissionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RoleMenuPermission) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleMenuPermissionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RoleMenuPermission) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleMenuPermissionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RoleMenuPermission) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleMenuPermissionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RoleMenuPermission) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleMenuPermissionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RoleMenuPermission) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleMenuPermissionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RoleMenuPermission) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleMenuPermissionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRoleMenuPermissionHook registers your hook function for all future operations.
func AddRoleMenuPermissionHook(hookPoint boil.HookPoint, roleMenuPermissionHook RoleMenuPermissionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		roleMenuPermissionAfterSelectMu.Lock()
		roleMenuPermissionAfterSelectHooks = append(roleMenuPermissionAfterSelectHooks, roleMenuPermissionHook)
		roleMenuPermissionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		roleMenuPermissionBeforeInsertMu.Lock()
		roleMenuPermissionBeforeInsertHooks = append(roleMenuPermissionBeforeInsertHooks, roleMenuPermissionHook)
		roleMenuPermissionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		roleMenuPermissionAfterInsertMu.Lock()
		roleMenuPermissionAfterInsertHooks = append(roleMenuPermissionAfterInsertHooks, roleMenuPermissionHook)
		roleMenuPermissionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		roleMenuPermissionBeforeUpdateMu.Lock()
		roleMenuPermissionBeforeUpdateHooks = append(roleMenuPermissionBeforeUpdateHooks, roleMenuPermissionHook)
		roleMenuPermissionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		roleMenuPermissionAfterUpdateMu.Lock()
		roleMenuPermissionAfterUpdateHooks = append(roleMenuPermissionAfterUpdateHooks, roleMenuPermissionHook)
		roleMenuPermissionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		roleMenuPermissionBeforeDeleteMu.Lock()
		roleMenuPermissionBeforeDeleteHooks = append(roleMenuPermissionBeforeDeleteHooks, roleMenuPermissionHook)
		roleMenuPermissionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		roleMenuPermissionAfterDeleteMu.Lock()
		roleMenuPermissionAfterDeleteHooks = append(roleMenuPermissionAfterDeleteHooks, roleMenuPermissionHook)
		roleMenuPermissionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		roleMenuPermissionBeforeUpsertMu.Lock()
		roleMenuPermissionBeforeUpsertHooks = append(roleMenuPermissionBeforeUpsertHooks, roleMenuPermissionHook)
		roleMenuPermissionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		roleMenuPermissionAfterUpsertMu.Lock()
		roleMenuPermissionAfterUpsertHooks = append(roleMenuPermissionAfterUpsertHooks, roleMenuPermissionHook)
		roleMenuPermissionAfterUpsertMu.Unlock()
	}
}

// One returns a single roleMenuPermission record from the query.
func (q roleMenuPermissionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RoleMenuPermission, error) {
	o := &RoleMenuPermission{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for role_menu_permissions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RoleMenuPermission records from the query.
func (q roleMenuPermissionQuery) All(ctx context.Context, exec boil.ContextExecutor) (RoleMenuPermissionSlice, error) {
	var o []*RoleMenuPermission

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RoleMenuPermission slice")
	}

	if len(roleMenuPermissionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RoleMenuPermission records in the query.
func (q roleMenuPermissionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count role_menu_permissions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q roleMenuPermissionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if role_menu_permissions exists")
	}

	return count > 0, nil
}

// MenuPermission pointed to by the foreign key.
func (o *RoleMenuPermission) MenuPermission(mods ...qm.QueryMod) menuPermissionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MenuPermissionID),
	}

	queryMods = append(queryMods, mods...)

	return MenuPermissions(queryMods...)
}

// Role pointed to by the foreign key.
func (o *RoleMenuPermission) Role(mods ...qm.QueryMod) roleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RoleID),
	}

	queryMods = append(queryMods, mods...)

	return Roles(queryMods...)
}

// LoadMenuPermission allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roleMenuPermissionL) LoadMenuPermission(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoleMenuPermission interface{}, mods queries.Applicator) error {
	var slice []*RoleMenuPermission
	var object *RoleMenuPermission

	if singular {
		var ok bool
		object, ok = maybeRoleMenuPermission.(*RoleMenuPermission)
		if !ok {
			object = new(RoleMenuPermission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRoleMenuPermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRoleMenuPermission))
			}
		}
	} else {
		s, ok := maybeRoleMenuPermission.(*[]*RoleMenuPermission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRoleMenuPermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRoleMenuPermission))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &roleMenuPermissionR{}
		}
		if !queries.IsNil(object.MenuPermissionID) {
			args[object.MenuPermissionID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleMenuPermissionR{}
			}

			if !queries.IsNil(obj.MenuPermissionID) {
				args[obj.MenuPermissionID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`menu_permissions`),
		qm.WhereIn(`menu_permissions.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MenuPermission")
	}

	var resultSlice []*MenuPermission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MenuPermission")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for menu_permissions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menu_permissions")
	}

	if len(menuPermissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MenuPermission = foreign
		if foreign.R == nil {
			foreign.R = &menuPermissionR{}
		}
		foreign.R.RoleMenuPermissions = append(foreign.R.RoleMenuPermissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MenuPermissionID, foreign.ID) {
				local.R.MenuPermission = foreign
				if foreign.R == nil {
					foreign.R = &menuPermissionR{}
				}
				foreign.R.RoleMenuPermissions = append(foreign.R.RoleMenuPermissions, local)
				break
			}
		}
	}

	return nil
}

// LoadRole allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roleMenuPermissionL) LoadRole(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoleMenuPermission interface{}, mods queries.Applicator) error {
	var slice []*RoleMenuPermission
	var object *RoleMenuPermission

	if singular {
		var ok bool
		object, ok = maybeRoleMenuPermission.(*RoleMenuPermission)
		if !ok {
			object = new(RoleMenuPermission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRoleMenuPermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRoleMenuPermission))
			}
		}
	} else {
		s, ok := maybeRoleMenuPermission.(*[]*RoleMenuPermission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRoleMenuPermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRoleMenuPermission))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &roleMenuPermissionR{}
		}
		if !queries.IsNil(object.RoleID) {
			args[object.RoleID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleMenuPermissionR{}
			}

			if !queries.IsNil(obj.RoleID) {
				args[obj.RoleID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`roles`),
		qm.WhereIn(`roles.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Role")
	}

	var resultSlice []*Role
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Role")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for roles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for roles")
	}

	if len(roleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Role = foreign
		if foreign.R == nil {
			foreign.R = &roleR{}
		}
		foreign.R.RoleMenuPermissions = append(foreign.R.RoleMenuPermissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RoleID, foreign.ID) {
				local.R.Role = foreign
				if foreign.R == nil {
					foreign.R = &roleR{}
				}
				foreign.R.RoleMenuPermissions = append(foreign.R.RoleMenuPermissions, local)
				break
			}
		}
	}

	return nil
}

// SetMenuPermission of the roleMenuPermission to the related item.
// Sets o.R.MenuPermission to related.
// Adds o to related.R.RoleMenuPermissions.
func (o *RoleMenuPermission) SetMenuPermission(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MenuPermission) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"role_menu_permissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"menu_permission_id"}),
		strmangle.WhereClause("\"", "\"", 2, roleMenuPermissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MenuPermissionID, related.ID)
	if o.R == nil {
		o.R = &roleMenuPermissionR{
			MenuPermission: related,
		}
	} else {
		o.R.MenuPermission = related
	}

	if related.R == nil {
		related.R = &menuPermissionR{
			RoleMenuPermissions: RoleMenuPermissionSlice{o},
		}
	} else {
		related.R.RoleMenuPermissions = append(related.R.RoleMenuPermissions, o)
	}

	return nil
}

// RemoveMenuPermission relationship.
// Sets o.R.MenuPermission to nil.
// Removes o from all passed in related items' relationships struct.
func (o *RoleMenuPermission) RemoveMenuPermission(ctx context.Context, exec boil.ContextExecutor, related *MenuPermission) error {
	var err error

	queries.SetScanner(&o.MenuPermissionID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("menu_permission_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.MenuPermission = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RoleMenuPermissions {
		if queries.Equal(o.MenuPermissionID, ri.MenuPermissionID) {
			continue
		}

		ln := len(related.R.RoleMenuPermissions)
		if ln > 1 && i < ln-1 {
			related.R.RoleMenuPermissions[i] = related.R.RoleMenuPermissions[ln-1]
		}
		related.R.RoleMenuPermissions = related.R.RoleMenuPermissions[:ln-1]
		break
	}
	return nil
}

// SetRole of the roleMenuPermission to the related item.
// Sets o.R.Role to related.
// Adds o to related.R.RoleMenuPermissions.
func (o *RoleMenuPermission) SetRole(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Role) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"role_menu_permissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"role_id"}),
		strmangle.WhereClause("\"", "\"", 2, roleMenuPermissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RoleID, related.ID)
	if o.R == nil {
		o.R = &roleMenuPermissionR{
			Role: related,
		}
	} else {
		o.R.Role = related
	}

	if related.R == nil {
		related.R = &roleR{
			RoleMenuPermissions: RoleMenuPermissionSlice{o},
		}
	} else {
		related.R.RoleMenuPermissions = append(related.R.RoleMenuPermissions, o)
	}

	return nil
}

// RemoveRole relationship.
// Sets o.R.Role to nil.
// Removes o from all passed in related items' relationships struct.
func (o *RoleMenuPermission) RemoveRole(ctx context.Context, exec boil.ContextExecutor, related *Role) error {
	var err error

	queries.SetScanner(&o.RoleID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("role_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Role = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RoleMenuPermissions {
		if queries.Equal(o.RoleID, ri.RoleID) {
			continue
		}

		ln := len(related.R.RoleMenuPermissions)
		if ln > 1 && i < ln-1 {
			related.R.RoleMenuPermissions[i] = related.R.RoleMenuPermissions[ln-1]
		}
		related.R.RoleMenuPermissions = related.R.RoleMenuPermissions[:ln-1]
		break
	}
	return nil
}

// RoleMenuPermissions retrieves all the records using an executor.
func RoleMenuPermissions(mods ...qm.QueryMod) roleMenuPermissionQuery {
	mods = append(mods, qm.From("\"role_menu_permissions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"role_menu_permissions\".*"})
	}

	return roleMenuPermissionQuery{q}
}

// FindRoleMenuPermission retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoleMenuPermission(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RoleMenuPermission, error) {
	roleMenuPermissionObj := &RoleMenuPermission{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"role_menu_permissions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, roleMenuPermissionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from role_menu_permissions")
	}

	if err = roleMenuPermissionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return roleMenuPermissionObj, err
	}

	return roleMenuPermissionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RoleMenuPermission) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no role_menu_permissions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roleMenuPermissionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	roleMenuPermissionInsertCacheMut.RLock()
	cache, cached := roleMenuPermissionInsertCache[key]
	roleMenuPermissionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			roleMenuPermissionAllColumns,
			roleMenuPermissionColumnsWithDefault,
			roleMenuPermissionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(roleMenuPermissionType, roleMenuPermissionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roleMenuPermissionType, roleMenuPermissionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"role_menu_permissions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"role_menu_permissions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into role_menu_permissions")
	}

	if !cached {
		roleMenuPermissionInsertCacheMut.Lock()
		roleMenuPermissionInsertCache[key] = cache
		roleMenuPermissionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RoleMenuPermission.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RoleMenuPermission) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	roleMenuPermissionUpdateCacheMut.RLock()
	cache, cached := roleMenuPermissionUpdateCache[key]
	roleMenuPermissionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			roleMenuPermissionAllColumns,
			roleMenuPermissionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update role_menu_permissions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"role_menu_permissions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, roleMenuPermissionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roleMenuPermissionType, roleMenuPermissionMapping, append(wl, roleMenuPermissionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update role_menu_permissions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for role_menu_permissions")
	}

	if !cached {
		roleMenuPermissionUpdateCacheMut.Lock()
		roleMenuPermissionUpdateCache[key] = cache
		roleMenuPermissionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q roleMenuPermissionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for role_menu_permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for role_menu_permissions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoleMenuPermissionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleMenuPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"role_menu_permissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, roleMenuPermissionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in roleMenuPermission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all roleMenuPermission")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RoleMenuPermission) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no role_menu_permissions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roleMenuPermissionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roleMenuPermissionUpsertCacheMut.RLock()
	cache, cached := roleMenuPermissionUpsertCache[key]
	roleMenuPermissionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			roleMenuPermissionAllColumns,
			roleMenuPermissionColumnsWithDefault,
			roleMenuPermissionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			roleMenuPermissionAllColumns,
			roleMenuPermissionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert role_menu_permissions, could not build update column list")
		}

		ret := strmangle.SetComplement(roleMenuPermissionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(roleMenuPermissionPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert role_menu_permissions, could not build conflict column list")
			}

			conflict = make([]string, len(roleMenuPermissionPrimaryKeyColumns))
			copy(conflict, roleMenuPermissionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"role_menu_permissions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(roleMenuPermissionType, roleMenuPermissionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roleMenuPermissionType, roleMenuPermissionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert role_menu_permissions")
	}

	if !cached {
		roleMenuPermissionUpsertCacheMut.Lock()
		roleMenuPermissionUpsertCache[key] = cache
		roleMenuPermissionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RoleMenuPermission record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RoleMenuPermission) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RoleMenuPermission provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roleMenuPermissionPrimaryKeyMapping)
	sql := "DELETE FROM \"role_menu_permissions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from role_menu_permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for role_menu_permissions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q roleMenuPermissionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no roleMenuPermissionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from role_menu_permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for role_menu_permissions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoleMenuPermissionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(roleMenuPermissionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleMenuPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"role_menu_permissions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roleMenuPermissionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from roleMenuPermission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for role_menu_permissions")
	}

	if len(roleMenuPermissionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RoleMenuPermission) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRoleMenuPermission(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleMenuPermissionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoleMenuPermissionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleMenuPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"role_menu_permissions\".* FROM \"role_menu_permissions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roleMenuPermissionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RoleMenuPermissionSlice")
	}

	*o = slice

	return nil
}

// RoleMenuPermissionExists checks if the RoleMenuPermission row exists.
func RoleMenuPermissionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"role_menu_permissions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if role_menu_permissions exists")
	}

	return exists, nil
}

// Exists checks if the RoleMenuPermission row exists.
func (o *RoleMenuPermission) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RoleMenuPermissionExists(ctx, exec, o.ID)
}
